[build-system]
requires = ["setuptools>=64"]
build-backend = "setuptools.build_meta"

[project]
name = "pybop"
version = "24.6.1"
authors = [
  {name = "The PyBOP Team"},
]
maintainers = [
  {name = "The PyBOP Team"},
]
description = "Python Battery Optimisation and Parameterisation"
readme = {file = "README.md", content-type = "text/markdown"}
license = { file = "LICENSE" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9, <3.13"
dependencies = [
  "pybamm>=24.5",
  "numpy>=1.16, <2.0",
  "scipy>=1.3",
  "pints>=0.5",
  "bpx>=0.4",
]

[project.optional-dependencies]
# Split kaleido into two dependencies to avoid Windows hang
# See: https://github.com/plotly/Kaleido/issues/110
plot = ["plotly>=5.0",
        "kaleido==0.1.0.post1; sys_platform == 'win32'",
        "kaleido>=0.2; sys_platform != 'win32'",
]
docs = [
    "pydata-sphinx-theme",
    "sphinx>=6",
    "sphinx-autobuild",
    "sphinx-autoapi",
    "sphinx_copybutton",
    "sphinx_favicon",
    "sphinx_design",
    "myst-parser",
]
dev = [
    "nox[uv]",
    "nbmake",
    "pre-commit",
    "pytest>=6",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "ruff",
    ]
scifem = [
  "scikit-fem>=8.1.0" # scikit-fem is a dependency for the multi-dimensional pybamm models
]
all = ["pybop[plot]", "pybop[scifem]"]

[tool.setuptools.packages.find]
include = ["pybop", "pybop.*"]

[project.urls]
Homepage = "https://github.com/pybop-team/PyBOP"
Documentation = "https://pybop-docs.readthedocs.io"
Repository = "https://github.com/pybop-team/PyBOP"
Releases = "https://github.com/pybop-team/PyBOP/releases"
Changelog = "https://github.com/pybop-team/PyBOP/blob/develop/CHANGELOG.md"

[tool.pytest.ini_options]
addopts = "--showlocals -v -n auto"

[tool.ruff]
extend-include = ["*.ipynb"]
extend-exclude = ["__init__.py"]
fix = true

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins: Check for Python builtins being used as variables or parameters
    "B",    # flake8-bugbear: Find likely bugs and design problems
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes: Detect various errors by parsing the source file
    "I",    # isort: Check and enforce import ordering
    "ISC",  # flake8-implicit-str-concat: Check for implicit string concatenation
    "TID",  # flake8-tidy-imports: Validate import hygiene
    "UP",   # pyupgrade: Automatically upgrade syntax for newer versions of Python
    "SLF001",  # flake8-string-format: Check for private object name access
]

ignore = ["E501","E741"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001"]
"**.ipynb" = ["E402", "E703"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
